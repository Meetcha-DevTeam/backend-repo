name: CD with Gradle and Docker

on:
  push:
    branches:
      - 'dev'
      - 'main'
      # - 'dev2' 
  pull_request:
    branches:
      - 'dev'
      - 'main'
      # - 'dev2' 

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: ☕️ set up JDK 17        # 프로젝트의 java 버전에 맞추어 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: 👏🏻 grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 🐘 build with Gradle (without test)
        run: ./gradlew clean build -x test --stacktrace

      - name: 🧪 check secret values (for debug only!)
        run: |
          echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}"

      - name: 🔍 check tag
        run: echo "${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}"

      - name: 🐳 Docker build & push
        run:  |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

      - name: 🚀 deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          envs: GITHUB_SHA
          script: |
            set -e

            APP_NAME="meetcha"
            IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}"
            
            echo "✋🏻 Remove any container that occupies the name"
            # 1) 이름으로 제거 (여러 개 대비)
            IDS_BY_NAME=$(sudo docker ps -aq -f "name=^/${APP_NAME}$" || true)
            if [ -n "$IDS_BY_NAME" ]; then
            echo "Found by name: $IDS_BY_NAME -> removing"
            sudo docker rm -f $IDS_BY_NAME || true
            fi
            # 2) 라벨로도 한 번 더 쓸기
            IDS_BY_LABEL=$(sudo docker ps -aq -f "label=app=${APP_NAME}" || true)
            if [ -n "$IDS_BY_LABEL" ]; then
            echo "Found by label: $IDS_BY_LABEL -> removing"
            sudo docker rm -f $IDS_BY_LABEL || true
            fi
            # 3) 이름이 완전히 비워질 때까지 잠깐 대기
            for i in $(seq 1 10); do
            LEFT=$(sudo docker ps -aq -f "name=^/${APP_NAME}$" || true)
            [ -z "$LEFT" ] && break
            echo "Waiting for Docker to release name (${i}/10)..."
            sleep 1
            done
            # 마지막으로 한 번 더 체크하고 남아있으면 실패 처리(원인 파악용 로그 출력)
            if sudo docker ps -aq -f "name=^/${APP_NAME}$" | grep -q .; then
            echo "❌ Name still in use. Dumping info:"
            sudo docker ps -a --filter "name=^/${APP_NAME}$" || true
            sudo docker inspect "${APP_NAME}" || true
            exit 1
            fi
  
            echo "🐳 Current docker containers:"
            sudo docker ps -a

            echo "🥳 Pulling new image"
            sudo docker pull "$IMAGE"

            echo "🌱 Running new container with ENV"
            sudo docker run -d --name "$APP_NAME" --label app="$APP_NAME" \
              -p 8000:8080 \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e SPRING_DATASOURCE_URL="${{ secrets.RDS_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.RDS_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.RDS_PASSWORD }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e GOOGLE_REDIRECT_URI="${{ secrets.GOOGLE_REDIRECT_URI }}" \
              "$IMAGE"

            echo "✅ Container status:"
            sudo docker ps -a

            echo "🔎 Verify env inside container (redirect URI)"
            sudo docker exec "$APP_NAME" /bin/sh -lc 'printenv | grep -E "^GOOGLE_(CLIENT_ID|REDIRECT_URI|CLIENT_SECRET)=" || true'
            
            echo "🧪 Nginx config test"
            if sudo nginx -t; then
              echo "🔁 Reloading Nginx"
              (sudo systemctl reload nginx || sudo service nginx reload || sudo nginx -s reload) || {
                echo "⚠️ Reload failed — trying full restart"
                sudo systemctl restart nginx || sudo service nginx restart
              }
            else
              echo "❌ Nginx config invalid. Showing error log tail"
              sudo tail -n 100 /var/log/nginx/error.log || true
              exit 1
            fi

            echo "🩺 Nginx status (brief)"
            (sudo systemctl status nginx --no-pager -l || sudo service nginx status) || true

            echo "🚮 Cleaning up old images & any old containers with the same label"
            CUR=$(sudo docker ps -q -f "name=^${APP_NAME}$" || true)
            OLD_LABELED=$(sudo docker ps -aq -f "label=app=${APP_NAME}" | grep -v "^${CUR}$" || true)
            if [ -n "$OLD_LABELED" ]; then
            sudo docker rm -f $OLD_LABELED || true
            fi
            sudo docker image prune -f

      
      




